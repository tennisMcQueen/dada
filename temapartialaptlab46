# domeniu ----------------------------
def creeazaTranzactie(ziua, suma, tipul, nr):
    '''
    creeaza un dictionar de tipul tranzactie
    :param ziua: nr. natural
    :param suma: float
    :param tipul: string
    :param nr: nr. natural
    :return: un dicitonar de tipul tranzactie
    '''
    return {
        "ziua": ziua,
        "suma": suma,
        "tipul": tipul,
        "nr": nr
    }

def getZiua(tranzactie):
    return tranzactie["ziua"]

def getSuma(tranzactie):
    return tranzactie["suma"]

def getTipul(tranzactie):
    return tranzactie["tipul"]

def getNr(tranzactie):
    return tranzactie["nr"]

def setZiua(tranzactie, ziua):
    tranzactie["ziua"] = ziua

def setSuma(tranzactie, suma):
    tranzactie["suma"] = suma

def setTipul(tranzactie, tipul):
    tranzactie["tipul"] = tipul

def setNr(tranzactie, nr):
    tranzactie["nr"] = nr

def toString(tranzactie):
    return "Ziua: " + str(getZiua(tranzactie)) + ", suma: " + str(getSuma(tranzactie)) + \
           ", tipul: " + getTipul(tranzactie) + ", NR: " + str(getNr(tranzactie))

# operatii ------------------
def adaugaTranzactie(ziua, suma, tipul, nr, listaTranzactii):
    '''
    adauga o tranzactie in lista
    :param ziua: nr. natural
    :param suma: float
    :param tipul: string
    :param nr: nr natural
    :param listaTranzactii: lista de dictionare de tipul tranzactie
    :return:
    '''
    tranzactie = creeazaTranzactie(ziua, suma, tipul, nr)
    listaTranzactii.append(tranzactie)

def modificaTranzactie(ziuaNoua, sumaNoua, tipulNou, nr, listaTranzactii):
    '''
    modifica o tranzactie dupa nr
    :param ziuaNoua: nr. natural
    :param sumaNoua: float
    :param tipulNou: string
    :param nr: nr natural
    :param listaTranzactii: lista de dictionare de tip tranzactie
    :return:
    '''
    for tranzactie in listaTranzactii:
        if getNr(tranzactie) == nr:
            setZiua(tranzactie, ziuaNoua)
            setSuma(tranzactie, sumaNoua)
            setTipul(tranzactie, tipulNou)


def stergeTranzactieDupaZi(ziua, listaTranzactii):
    '''
    sterge o carte dupa zi
    :param nr: nr. natural
    :param listaTranzactii: lista de dictionare de tipul tranzazctii
    :return:
    '''

    for tranzactie in listaTranzactii:
        if getZiua(tranzactie) == ziua:
            listaTranzactii.remove(tranzactie)

def stergeTranzactiiDupaTip(tipul, listaTranzactii):
    i = 0
    while i < len(listaTranzactii):
        if getTipul(listaTranzactii[i]) == tipul:
            listaTranzactii.pop(i)
            i = i - 1
        i += 1

def stergeTranzactiidinInterval(ziMin, ziMax, listaTranzactii):
    '''
    gaseste tranzctiile cuprinse intr-un interval de pret dat
    :param ziMin: nr natural
    :param ziMax: nr natural
    :param listaTranzactii: lista de dictionare de tip tranzactii
    :return:
    '''
    for tranzactie in listaTranzactii:
        if ziMin < getZiua(tranzactie) < ziMax:
            listaTranzactii.remove(tranzactie)

'''def sumePreturiPerAutor(listaCarti):
    
   # calculeaza suma peturilor cartilor fiecarui autor
   # :param listaCarti: lista de dictionare de tipul carte
   # :return: un dicitonar, continand drept chei numele autorilor
    #         si drept valori suma preturilor cartilor lor
    
    rezultat = {}
    for carte in listaCarti:
        autor = getTipul(carte)
        pret = getNr(carte)
        if autor in rezultat:
            rezultat[autor] += pret
        else:
            rezultat[autor] = pret
    return rezultat'''

def tranzactiiCuSumaMaiMareDecatoSumaData(suma, listaTranzactii):
    '''
    tipareste tranzactiile care au o suma mai mare decat o suma data
    :param suma: float
    :param listaTranzactii: lista de dictionare de tip tranzactii
    :return: lista de dictionare de tip tranzactie
    '''

    rezultat = []
    for tranzactie in listaTranzactii:
        if suma < getSuma(tranzactie):
            rezultat.append(tranzactie)
    return rezultat

def tranzactiiDeoZi(ziua, suma, listaTranzactii):
      '''
      tipareste tranzactiile efectuate inainte de o zi si mai mari decat o suma data
      :param ziua: nr natural
      :param suma: float
      :param listaTranzactii: lista de dictionare de tip tranzactii
      :return: lista de dictionare de tip tranzactie
      '''

      rezultat =[]
      for tranzactie in listaTranzactii:
          if getZiua(tranzactie) < ziua:
              if getSuma(tranzactie) < suma:
                  rezultat.append(tranzactie)
      return rezultat

def tranzactiiTip(tipul, listaTranzactii):
    '''
    tipareste tranzactiile de un anumit tip
    :param tipul: string
    :param listaTranzactii: lista de dictionare de tip tranzactie
    :return: lista de dictionare de tip tranzactie
    '''
    rezultat = []
    for tranzactie in listaTranzactii:
        if getTipul(tranzactie) == tipul:
            rezultat.append(tranzactie)
    return rezultat

def sumaTotalaDeUnAnumitTip(tipul, listaTranzactii):
    '''
    tipareste suma tranzactiilor de un anumit tip
    :param tipul: string
    :param listaTranzactii: lista de dictionare de tip tranzactie
    :return: suma totala a tranzactiilor
    '''

    suma = 0
    for tranzactie in listaTranzactii:
        if getTipul(tranzactie) == tipul:
            suma = suma + getSuma(tranzactie)
    return suma

def stergeTranzactiiMaiMiciDetip(suma,tipul,listaTranzactii):
    '''
    sterge tranzactiile mai mici decat o suma data si care au tipul specificat
    :param suma:
    :param tipul:
    :param listaTranzactii:lista de dictionare de tip tranzactie
    :return:
    '''
    for tranzactie in listaTranzactii:
        if getTipul(tranzactie) == tipul:
            if getSuma(tranzactie) < suma:
                listaTranzactii.remove(tranzactie)

def soldulContuluiLaoData(ziua, listaTranzactii):
    '''
    afiseaza soldul contului la o data specificata
    :param ziua: nr natural
    :param listaTranzactii: lista de dictionare de tip tranzactie
    :return: o suma reprezentand soldul contului
    '''

    suma = 0
    for tranzactie in listaTranzactii:
        if getZiua(tranzactie) < ziua + 1:
            if getTipul(tranzactie) == "depunere":
                suma = suma + getSuma(tranzactie)
            else:
                suma = suma - getSuma(tranzactie)
    return suma

# UI
def printMenu():
    print("1. Adauga tranzactie {ziua} {suma} {tipul} {nr}")
    print("2. Modifica tranzactie {ziuaNoua} {sumaNoua} {tipulNou} {nr}")
    print("3. Sterge tranzactie dupa zi {ziua}")
    print("4. Sterge tranzactie dupa tip {tipul}")
    print("5. Sterge tranzactie din interval de zile {ziMin} {ziMax}")
    print("6. Afiseaza tranzactiile cu suma mai mare decat o suma data {suma}")
    print("7. Tipareste tranzactiile efectuate inainte de o zi si mai mari decat o suma data {ziua} {suma}")
    print("8. Tipareste tranzactiile de un anumit tip {tipul}")
    print("9. Tipareste suma tranzactiilor de un anumit tip {tipul}")
    print("10.Sterge tranzactiile mai mici decat o suma data si care au tipul specificat {suma} {tipul}")
    print("11.Soldul contului la o data anume {ziua}")
    print("a. Afiseaza tranzactiile")
    print("x. Iesire")

def printTranzactii(listaTranzactii):
    for tranzactie in listaTranzactii:
        print(toString(tranzactie))

def uiAdaugaTranactie(listaTranzactii,comanda):
    try:
        parametri= comanda.split()[1]
        ziua = int(parametri.split(',')[0])
        suma = float(parametri.split(',')[1])
        tipul = parametri.split(',')[2]
        nr = int(parametri.split(',')[3])
        adaugaTranzactie(ziua, suma, tipul, nr, listaTranzactii)
    except ValueError as e:
        print (e)
    except IndexError as e:
        print (e)

def uiModificaTranzactie(listaTranzactii,comanda):
    try:
        parametri = comanda.split()[1]
        ziua = int(parametri.split(',')[0])
        suma = float(parametri.split(',')[1])
        tipul = parametri.split(',')[2]
        nr = int(parametri.split(',')[3])
        modificaTranzactie(ziua, suma, tipul, nr, listaTranzactii)
    except ValueError as e:
        print(e)
    except IndexError as e:
        print(e)

def uistergeTranzactieDupaZi(listaTranzactii,comanda):
    try:
        parametri = comanda.split()[1]
        ziua = int(parametri.split()[0])
        stergeTranzactieDupaZi(ziua, listaTranzactii)
    except ValueError as e:
        print(e)
    except IndexError as e:
        print(e)

def uistergeTranzactiiDupaTip(listaTranzactii,comanda):
    try:
        parametri = comanda.split()[1]
        tipul = parametri.split()[0]
        stergeTranzactiiDupaTip(tipul, listaTranzactii)
    except IndexError as e:
        print(e)

def uistergeTranzactiidinInterval(listaTranzactii,comanda):
    try:
        parametri = comanda.split()[1]
        ziMin =int(parametri.split(',')[0])
        ziMax = int(parametri.split(',')[1])
        return stergeTranzactiidinInterval(ziMin, ziMax, listaTranzactii)
    except ValueError as e:
        print(e)
    except IndexError as e:
        print(e)

def uitranzactiiCuSumaMaiMareDecatoSumaData(listaTranzactii,comanda):
    try:
        parametri = comanda.split()[1]
        suma = int(parametri.split()[0])
        print (tranzactiiCuSumaMaiMareDecatoSumaData(suma, listaTranzactii))
    except ValueError as e:
        print(e)
    except IndexError as e:
        print(e)

def uitranzactiiDeoZi(listaTranzactii,comanda):
    try:
        parametri = comanda.split()[1]
        ziua = int(parametri.split(',')[0])
        suma = int(parametri.split(',')[1])
        return tranzactiiDeoZi(ziua, suma, listaTranzactii)
    except ValueError as e:
        print(e)
    except IndexError as e:
        print(e)

def uitranzactiiTip(listaTranzactii,comanda):
    try:
        parametri = comanda.split()[1]
        tipul = parametri.split()[0]
        return tranzactiiTip(tipul, listaTranzactii)
    except ValueError as e:
        print(e)
    except IndexError as e:
        print(e)

def uisumaTotalaDeUnAnumitTip(listaTranzactii,comanda):
    try:
        parametri = comanda.split()[1]
        tipul = parametri.split()[0]
        return sumaTotalaDeUnAnumitTip(tipul, listaTranzactii)
    except ValueError as e:
        print(e)
    except IndexError as e:
        print(e)

def uistergeTranzactiiMaiMiciDetip(listaTranzactii,comanda):
    try:
        parametri = comanda.split()[1]
        suma = int(parametri.split(',')[0])
        tipul = parametri.split(',')[1]
        return stergeTranzactiiMaiMiciDetip(suma, tipul, listaTranzactii)
    except ValueError as e:
        print(e)
    except IndexError as e:
        print(e)

def uisoldulContuluiLaoData(listaTranzactii,comanda):
    try:
        ziua = int(comanda.split()[1])
        return soldulContuluiLaoData(ziua, listaTranzactii)
    except ValueError as e:
        print(e)


# teste ----------------

def testCreeazaTranzactie():
    tranzactie = creeazaTranzactie(1, 1, "retragere", 1)
    assert getZiua(tranzactie) == 1
    assert getSuma(tranzactie) == 1
    assert getTipul(tranzactie) == "retragere"
    assert getNr(tranzactie) == 1

def testSetteri():
    tranzactie = creeazaTranzactie(1, 1, "retragere", 1)

    setZiua(tranzactie, 1)
    assert getZiua(tranzactie) == 1

    setSuma(tranzactie, 1)
    assert getSuma(tranzactie) == 1

    setTipul(tranzactie, "retragere")
    assert getTipul(tranzactie) == "retragere"

    setNr(tranzactie, 1)
    assert getNr(tranzactie) == 1

def testAdaugaTranzactie():
    listaTranzactii = []
    ziua = 1
    suma = 1
    tipul = "retragere"
    nr = 1

    adaugaTranzactie(ziua, suma, tipul, nr, listaTranzactii)

    assert(len(listaTranzactii) == 1)
    tranzactie = listaTranzactii[0]
    assert getZiua(tranzactie) == 1
    assert getSuma(tranzactie) == 1
    assert getTipul(tranzactie) == "retragere"
    assert getNr(tranzactie) == 1

def testModificaTranzactie():
    listaTranzactii = []
    ziuaNoua = 2
    sumanoua = 2
    tipulNou = "depunere"
    adaugaTranzactie(1, 1, "retragere", 1, listaTranzactii)
    adaugaTranzactie(2, 2, "depunere", 2, listaTranzactii)

    modificaTranzactie(ziuaNoua, sumanoua, tipulNou, 1, listaTranzactii)

    assert(len(listaTranzactii) == 2)

    assert(getZiua(listaTranzactii[0]) == ziuaNoua)
    assert (getSuma(listaTranzactii[0]) == sumanoua)
    assert (getTipul(listaTranzactii[0]) == tipulNou)

    assert (getZiua(listaTranzactii[1]) == 2)
    assert (getSuma(listaTranzactii[1]) == 2)
    assert (getTipul(listaTranzactii[1]) == "depunere")
    assert (getNr(listaTranzactii[1]) == 2)

def teststergeTranzactieDupaZi():
    listaTranzactii = []
    adaugaTranzactie(1, 1, "retragere", 1, listaTranzactii)
    adaugaTranzactie(2, 2, "depunere", 2, listaTranzactii)

    stergeTranzactieDupaZi(2, listaTranzactii)

    assert(len(listaTranzactii) == 1)
    assert(getZiua(listaTranzactii[0]) == 1)

def testtranzactiiCuSumaMaiMareDecatoSumaData():
    listaTranzactii = []
    adaugaTranzactie(1, 70, "retragere", 1, listaTranzactii)
    adaugaTranzactie(2, 20, "depunere", 2, listaTranzactii)

    rezultat = tranzactiiCuSumaMaiMareDecatoSumaData(40, listaTranzactii)

    assert (len(rezultat) == 1)

def testtranzactiiDeoZi():
    listaTranzactii = []
    adaugaTranzactie(1, 70, "retragere", 1, listaTranzactii)
    adaugaTranzactie(2, 20, "depunere", 2, listaTranzactii)

    rezultat = tranzactiiDeoZi(2, 50, listaTranzactii)

    assert (len(rezultat) == 1)

def teststergeTranzactiiDupaTip():
    listaTranzactii = []
    adaugaTranzactie(1, 1, "retragere", 1, listaTranzactii)
    adaugaTranzactie(2, 2, "depunere", 2, listaTranzactii)

    stergeTranzactiiDupaTip("retragere", listaTranzactii)

    assert (len(listaTranzactii) == 1)
    assert (getZiua(listaTranzactii[0]) == 2)


def teststergeTranzactiidinInterval():
    listaTranzactii = []
    adaugaTranzactie(2, 2, "retragere", 2, listaTranzactii)
    adaugaTranzactie(4, 4, "depunere", 4, listaTranzactii)

    ziMin=1
    ziMax=3
    stergeTranzactiidinInterval(ziMin, ziMax, listaTranzactii)

    assert (len(listaTranzactii) == 1)
    assert (getZiua(listaTranzactii[0]) == 4)

def testtranzactiiTip():
    listaTranzactii = []
    adaugaTranzactie(1, 1, "retragere", 1, listaTranzactii)
    adaugaTranzactie(2, 2, "depunere", 2, listaTranzactii)

    rezultat = tranzactiiTip("retragere", listaTranzactii)

    assert (len(rezultat) == 1)

def testsumaTotalaDeUnAnumitTip():
    listaTranzactii = []
    adaugaTranzactie(1, 70, "retragere", 1, listaTranzactii)
    adaugaTranzactie(2, 20, "depunere", 2, listaTranzactii)

    suma = sumaTotalaDeUnAnumitTip("retragere",listaTranzactii)

    assert (suma == 70)

def teststergeTranzactiiMaiMiciDetip():
    listaTranzactii = []
    adaugaTranzactie(1, 20, "retragere", 1, listaTranzactii)
    adaugaTranzactie(2, 70, "depunere", 2, listaTranzactii)

    rezultat= stergeTranzactiiMaiMiciDetip(40,"retragere", listaTranzactii)

    assert(len(rezultat) == 1)



def testAll():
    testCreeazaTranzactie()
    testSetteri()
    testAdaugaTranzactie()
    testModificaTranzactie()
    teststergeTranzactieDupaZi()
    testtranzactiiCuSumaMaiMareDecatoSumaData()
    #testtranzactiiDeoZi()
    teststergeTranzactiiDupaTip()
    teststergeTranzactiidinInterval()
    testtranzactiiTip()
    testsumaTotalaDeUnAnumitTip()
    #teststergeTranzactiiMaiMiciDetip()

def main():
    testAll()
    listaTranzactii = []
    while True:
        printMenu()
        comanda = input("Dati comanda: ")
        operatiune = comanda.split()[0]
        if operatiune == "adauga":
            uiAdaugaTranactie(listaTranzactii, comanda)
        elif operatiune == "modifica":
            uiModificaTranzactie(listaTranzactii, comanda)
        elif operatiune == "sterge_tranzactie_dupa_zi":
            uistergeTranzactieDupaZi(listaTranzactii, comanda)
        elif operatiune == "sterge_tranzactie_dupa_tip":
            uistergeTranzactiiDupaTip(listaTranzactii, comanda)
        elif operatiune == "sterge_tranzactie_din_interval":
            uistergeTranzactiidinInterval(listaTranzactii, comanda)
        elif operatiune == "tranzactii_cu_suma_mai_mare":
            uitranzactiiCuSumaMaiMareDecatoSumaData(listaTranzactii, comanda)
        elif operatiune == "tranzactii_de_o_zi":
            print(uitranzactiiDeoZi(listaTranzactii,comanda))
        elif operatiune == "tranzactii_tip":
            print(uitranzactiiTip(listaTranzactii,comanda))
        elif operatiune == "suma_totala_tip":
            print(uisumaTotalaDeUnAnumitTip(listaTranzactii,comanda))
        elif operatiune == "sterge_tranzactii_mai_mici":
            uistergeTranzactiiMaiMiciDetip(listaTranzactii, comanda)
        elif operatiune == "soldul_contului":
            print(uisoldulContuluiLaoData(listaTranzactii,comanda))
        elif operatiune == "afiseaza":
            printTranzactii(listaTranzactii)
        elif operatiune == "iesire":
            break
        else:
            print("Optiune gresita! Reincercati")

main()
